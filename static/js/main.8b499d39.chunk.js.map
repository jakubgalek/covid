{"version":3,"sources":["Components/LatestUpdate/LatestUpdate.js","Components/Table/Table.js","Components/Chart/Chart.js","data/covidAPI.js","App.js","index.js"],"names":["Latest","props","className","date","confirmed","differenceC","recovered","differenceR","deaths","differenceD","Table","table","confirmedData","recoveredData","deathsData","map","index","Chart","chart","options","legend","display","maintainAspectRatio","scales","xAxes","type","ticks","autoSkip","maxTicksLimit","reverse","time","unit","data","labels","datasets","label","borderColor","borderWidth","pointRadius","grace","hidden","getCovidData","a","fetch","then","response","json","Poland","flaga","differenceCbar","forEach","arr","push","previous","latestState","pop","previousLatestState","length","App","useState","setData","getData","useEffect","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b499d39.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./LatestUpdate.css\";\r\n\r\nconst Latest = (props) => {\r\n  return (\r\n    <div className=\"latest\">\r\n      <div className=\"dateDiv\">\r\n        Stan na dzień: <span className=\"date\">{props.date}</span>\r\n      </div>\r\n      <div className=\"todayBox todayConfirmedBox\">\r\n        Zakażeni\r\n        <div className=\"todayInfo todayConfirmedInfo\">\r\n          {props.confirmed} (+{props.differenceC})\r\n        </div>\r\n      </div>\r\n      <div className=\"todayBox todayRecoveredBox\">\r\n        Wyleczeni\r\n        <div className=\"todayInfo todayRecoveredInfo\">\r\n          {props.recovered} (+{props.differenceR})\r\n        </div>\r\n      </div>\r\n      <div className=\"todayBox todayDeadBox\">\r\n        Zgony\r\n        <div className=\"todayInfo todayDeadInfo\">\r\n          {props.deaths} (+{props.differenceD})\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Latest;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\n\r\nconst Table = ({\r\n  table = {\r\n    date: [],\r\n    confirmed: [],\r\n    recovered: [],\r\n    deaths: []\r\n  }\r\n}) => {\r\n  const {\r\n    date,\r\n    confirmed: confirmedData,\r\n    recovered: recoveredData,\r\n    deaths: deathsData\r\n  } = table;\r\n\r\n \r\n  return (\r\n    <div className=\"table\">\r\n      <table>\r\n         <thead>\r\n        <tr className=\"tableHeader\">\r\n          <th>Data</th>\r\n          <th className=\"tableConfirmed\">Zakażeni</th>\r\n          <th className=\"tableRecovered\">Wyleczeni</th>\r\n          <th className=\"tableDead\">Zgony</th>\r\n        </tr>\r\n        </thead>\r\n\r\n        {date.map((date, index) => {\r\n       \r\n          const { confirmed, differenceC } = confirmedData[index];\r\n          const { deaths, differenceD } = deathsData[index];\r\n          const { recovered, differenceR } = recoveredData[index];\r\n          return (\r\n            <tbody key ={index}>\r\n            <tr>\r\n              <td> {date} </td>\r\n              <td>\r\n                {confirmed} &nbsp; (+{differenceC})\r\n              </td>\r\n              <td>\r\n                {recovered} &nbsp; (+{differenceR})\r\n              </td>\r\n              <td>\r\n                {deaths} &nbsp; (+{differenceD})\r\n              </td>\r\n            </tr>\r\n            </tbody>\r\n          );\r\n        })}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import \"./Chart.css\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst Chart = ({\r\n    chart = {\r\n      date: [],\r\n      differenceC: [],\r\n      differenceR: [],\r\n      differenceD: []\r\n\r\n    }\r\n  }) => {\r\n    return (\r\n      <div className=\"chart\">\r\n        <Line\r\n          options={{\r\n            legend: {\r\n              display: true\r\n            },\r\n            maintainAspectRatio: false,\r\n          \r\n            scales: {\r\n              xAxes: [{\r\n                type: 'time',\r\n                ticks: {\r\n                    autoSkip: true,\r\n                    maxTicksLimit: 100,\r\n                    reverse: false\r\n                },\r\n                time: {\r\n                  unit: 'quarter'\r\n              }         \r\n              }],\r\n \r\n            }\r\n          }}\r\n          data={{\r\n            labels: [...chart.date],\r\n            datasets: [\r\n              {\r\n                label: \"Nowe przypadki\",\r\n                borderColor: \"#00B2FF\",\r\n                data: [...chart.differenceC],\r\n                borderWidth: \"3\",\r\n                pointRadius: \"true\",\r\n                grace: '2000'\r\n              },\r\n              {\r\n                label: \"Wyleczeni\",\r\n                borderColor: \"#00FF85\",\r\n                data: [...chart.differenceR],\r\n                borderWidth: \"3\",\r\n                pointRadius: \"true\",\r\n                hidden: \"true\"\r\n              },\r\n              {\r\n                label: \"Zgony\",\r\n                borderColor: \"#FF003D\",\r\n                data: [...chart.differenceD],\r\n                borderWidth: \"3\",\r\n                pointRadius: \"true\",\r\n                hidden: \"true\"\r\n              }\r\n]\r\n          }}\r\n          type=\"invertedLinear\"\r\n        />\r\n        {/* <canvas id=\"myChart\"></canvas> */}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default Chart;\r\n","const getCovidData = async () => {\r\n  return fetch(\"https://pomber.github.io/covid19/timeseries.json\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      const { Poland } = data;\r\n      let flaga=0;\r\n      const chart = {\r\n        date: [],\r\n        differenceC: [],\r\n        differenceCbar:[],\r\n        differenceR: [],\r\n        differenceD: []\r\n      };\r\n\r\n      const table = {\r\n        date: [],\r\n        confirmed: [],\r\n        recovered: [],\r\n        deaths: []\r\n      };\r\n\r\n      [...Poland]\r\n        .reverse()\r\n        .forEach(({ date, confirmed, recovered, deaths }, index, arr) => {\r\n          table.date.push(date);\r\n          if (flaga%7===0)\r\n          chart.date.push(date);\r\n       \r\n          const previous = arr[index + 1] || 0;\r\n\r\n          const differenceC = confirmed - previous.confirmed;\r\n          table.confirmed.push({ confirmed, differenceC });\r\n         \r\n          if (flaga%7===0)\r\n          chart.differenceC.push(differenceC);\r\n\r\n          const differenceR = recovered - previous.recovered;\r\n          table.recovered.push({ recovered, differenceR });\r\n          \r\n          if (flaga%7===0)\r\n          chart.differenceR.push(differenceR);\r\n\r\n          const differenceD = deaths - previous.deaths;\r\n          table.deaths.push({ deaths, differenceD });\r\n          \r\n          if (flaga%7===0)\r\n          chart.differenceD.push(differenceD);\r\n          \r\n          flaga++;\r\n        });\r\n\r\n      const latestState = Poland.pop();\r\n      const previousLatestState = Poland[Poland.length - 1];\r\n\r\n      const { date, confirmed, deaths, recovered } = latestState;\r\n      const {\r\n        confirmed: previousConfirmed,\r\n        deaths: previousDeaths,\r\n        recovered: previousRecovered\r\n      } = previousLatestState;\r\n\r\n      const differenceC = confirmed - previousConfirmed;\r\n      const differenceR = recovered - previousRecovered;\r\n      const differenceD = deaths - previousDeaths;\r\n\r\n\r\n\r\n\r\n      return {\r\n        date,\r\n        confirmed,\r\n        deaths,\r\n        recovered,\r\n        differenceC,\r\n        differenceD,\r\n        differenceR,\r\n        chart,\r\n        table\r\n      };\r\n    });\r\n};\r\nexport default getCovidData;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Latest from './Components/LatestUpdate/LatestUpdate.js';\r\nimport Table from './Components/Table/Table.js';\r\nimport Chart from './Components/Chart/Chart.js';\r\nimport getCovidData from \"./data/covidAPI.js\";\r\nimport './App.css';\r\n\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState({});\r\n  const getData = async () => {\r\n    setData(await getCovidData());\r\n  };\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      <h1>Statystyka dotycząca koronawirusa w Polsce</h1>\r\n      <Latest {...data} />\r\n      <div className=\"DescriptionBox\">\r\n        <Table {...data} />\r\n        <Chart {...data} />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}